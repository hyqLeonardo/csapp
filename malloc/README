#####################################################################
# CS:APP Malloc Lab
#
# My implementation trace
#
######################################################################

*******************
Implicit free list:
*******************
Results for mm malloc:
trace  valid  util     ops      secs  Kops
 0       yes   99%    5694  0.009229   617
 1       yes   99%    5848  0.007409   789
 2       yes   99%    6648  0.012926   514
 3       yes  100%    5380  0.009774   550
 4       yes   66%   14400  0.000459 31366
 5       yes   92%    4800  0.009828   488
 6       yes   92%    4800  0.009201   522
 7       yes   55%   12000  0.172656    70
 8       yes   51%   24000  0.404303    59
 9       yes   27%   14401  0.157502    91
10       yes   34%   14401  0.003879  3713
Total          74%  112372  0.797166   141

Perf index = 44 (util) + 9 (thru) = 54/100


*******************
Explicit free list:
*******************
Results for mm malloc:
trace  valid  util     ops      secs  Kops
 0       yes   89%    5694  0.000360 15817
 1       yes   91%    5848  0.000279 20968
 2       yes   94%    6648  0.000471 14106
 3       yes   97%    5380  0.000353 15258
 4       yes   66%   14400  0.000482 29863
 5       yes   89%    4800  0.000670  7167
 6       yes   88%    4800  0.000697  6885
 7       yes   55%   12000  0.003605  3329
 8       yes   51%   24000  0.003927  6111
 9       yes   27%   14401  0.157769    91
10       yes   30%   14401  0.004088  3523
Total          71%  112372  0.172700   651

Perf index = 42 (util) + 40 (thru) = 82/100



#####################################################################
# CS:APP Malloc Lab
# Handout files for students
#
# Copyright (c) 2002, R. Bryant and D. O'Hallaron, All rights reserved.
# May not be used, modified, or copied without permission.
#
######################################################################

***********
Main Files:
***********

mm.{c,h}	
	Your solution malloc package. mm.c is the file that you
	will be handing in, and is the only file you should modify.

mdriver.c	
	The malloc driver that tests your mm.c file

short{1,2}-bal.rep
	Two tiny tracefiles to help you get started. 

Makefile	
	Builds the driver

**********************************
Other support files for the driver
**********************************

config.h	Configures the malloc lab driver
fsecs.{c,h}	Wrapper function for the different timer packages
clock.{c,h}	Routines for accessing the Pentium and Alpha cycle counters
fcyc.{c,h}	Timer functions based on cycle counters
ftimer.{c,h}	Timer functions based on interval timers and gettimeofday()
memlib.{c,h}	Models the heap and sbrk function

*******************************
Building and running the driver
*******************************
To build the driver, type "make" to the shell.

To run the driver on a tiny test trace:

	unix> mdriver -V -f short1-bal.rep

The -V option prints out helpful tracing and summary information.

To get a list of the driver flags:

	unix> mdriver -h

********************
Trace file format
********************

A trace file is an ASCII file. It begins with a 4-line header:

<sugg_heapsize>   /* suggested heap size (unused) */
<num_ids>         /* number of request id's */
<num_ops>         /* number of requests (operations) */
<weight>          /* weight for this trace (unused) */

The header is followed by num_ops text lines. Each line denotes either
an allocate [a], reallocate [r], or free [f] request. The <alloc_id>
is an integer that uniquely identifies an allocate or reallocate
request.

a <id> <bytes>  /* ptr_<id> = malloc(<bytes>) */
r <id> <bytes>  /* realloc(ptr_<id>, <bytes>) */ 
f <id>          /* free(ptr_<id>) */

For example, the following trace file:

<beginning of file>
20000
3
8
1
a 0 512
a 1 128
r 0 640
a 2 128
f 1
r 0 768
f 0
f 2
<end of file>

is balanced. It has a recommended heap size of 20000 bytes (ignored),
three distinct request ids (0, 1, and 2), eight different requests
(one per line), and a weight of 1 (ignored).

************************
Description of traces
************************

* short{1,2}-bal.rep

Tiny synthetic tracefiles for debugging

* {amptjp,cccp,cp-decl,expr}-bal.rep

Traces generated from real programs.

* {binary,binary2}-bal.rep

The allocation pattern is to alternatively allocate a small-sized
chunk of memory and a large-sized chunk. The small-sized chunks
(either 16 or 64 ) are deliberately set to be power of 2 while the
large-size chunks (either 112 or 448) are not a power of 2. Defeats
buddy algorithms. However, a simple-minded algorithm might prevail in
this scenario because a first-fit scheme will be good enough.

* coalescing-bal.rep

Repeatedly allocate two equal-sized chunks (4095 in size) and release
them, and then immediately allocate and free a chunk twice as big
(8190). This tests if the students' algorithm ever really releases
memory and does coalescing. The size is chosen to give advantage to
tree-based or segrated fits algorithms where there is no header or
footer overhead.

* {random,random2}-bal.rep
	
Random allocate and free requesets that simply test the correctness
and robustness of the algorithm.


* {realloc,realloc2}-bal.rep
	
Reallocate previously allocated blocks interleaved by other allocation
request. The purpose is to test whether a certain amount of internal
fragments are allocated or not. Naive realloc implementations that
always realloc a brand new block will suffer.